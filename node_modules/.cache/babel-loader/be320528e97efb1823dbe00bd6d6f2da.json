{"ast":null,"code":"export default async function getHourly_Weekly_CurrentWeather(location) {\n  if (!location) {\n    alert(\"Unexpected error. Try again\");\n    return;\n  }\n  let ifSavedLocation = false;\n  let index = 0;\n  const getSavedLocations = JSON.parse(localStorage.getItem(\"savedLocations\"));\n  for (index = 0; index < getSavedLocations.length; index++) {\n    if (location === getSavedLocations[index]) {\n      ifSavedLocation = true;\n      break;\n    }\n  }\n  let sevenDayData = [];\n  let hourlyData = [];\n  let getAllCoordinates;\n  let currentWeatherData;\n  const errorCurrentData = [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"];\n  const error7DayData = [[\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"], [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"], [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"], [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"], [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"]];\n  const errorHrDatan\n  // the location provided to us is not in the saved location, so we need to go get that lat and lon for that location\n  if (!ifSavedLocation) {\n    // alert(\"Not in saved locations\");\n    let getCity = location.split(\",\");\n    let endpointCoord = `https://api.openweathermap.org/geo/1.0/direct?q=${getCity[0]}&appid=e15a543800b7e60db9e4e04aaf22a037`; // api to get coordinates lat and lon\n    const response = await fetch(endpointCoord);\n    if (response.status !== 200) {\n      alert(\"Unexpected error happened when getting coordinates. Please try again\");\n      return [errorHrData, error7DayData, errorCurrentData];\n    }\n    const responseData = await response.json();\n    const newCoor = [responseData[0].lat, responseData[0].lon];\n    getAllCoordinates = newCoor;\n    let endpoint = `https://api.openweathermap.org/data/2.5/onecall?lat=${getAllCoordinates[0]}&lon=${getAllCoordinates[1]}&exclude=minutely,alerts&units=imperial&appid=e15a543800b7e60db9e4e04aaf22a037`;\n    const res = await fetch(endpoint);\n    if (res.status !== 200) {\n      alert(\"Unexpected error happened when cit's weather. Please try again\");\n      return [errorHrData, error7DayData, errorCurrentData];\n    }\n    const data = await res.json();\n\n    // this is the code to get the current weather information\n    const currentTemp = data.current.temp.toFixed(0);\n    ;\n    const currentSunset = new Date(data.current.sunset * 1000);\n    const sunsetHour = currentSunset.getHours();\n    const sunsetMins = currentSunset.getMinutes();\n    let newSunsetTime;\n    if (sunsetHour === 0) {\n      newSunsetTime = `12:${sunsetMins} am`;\n    } else if (sunsetHour > 11) {\n      const difference = sunsetHour - 12;\n      if (difference === 0) {\n        newSunsetTime = `12:${sunsetMins} pm`;\n      } else {\n        newSunsetTime = `${difference}:${sunsetMins} pm`;\n      }\n    } else {\n      newSunsetTime = `${sunsetHour}:${sunsetMins} am`;\n    }\n    const currentHumidity = data.current.humidity;\n    const currentIcon = data.current.weather[0].icon;\n    const currentIconURL = `https://openweathermap.org/img/wn/${currentIcon}@2x.png`;\n    const currentDesc = data.current.weather[0].description;\n    const currentFeels = data.current.feels_like.toFixed(0);\n    currentWeatherData = [currentTemp, newSunsetTime, currentHumidity, currentIconURL, currentDesc, currentFeels];\n\n    // this code is to get the hourly data\n    data.hourly.forEach((value, idx) => {\n      if (idx < 24 && hourlyData.length !== 24) {\n        const currentDate = new Date(value.dt * 1000);\n        const currentHour = currentDate.getHours();\n        let hourFormat;\n        if (currentHour === 0) {\n          hourFormat = `12:00 am`;\n        } else if (currentHour > 11) {\n          const difference = currentHour - 12;\n          if (difference === 0) {\n            hourFormat = `12:00 pm`;\n          } else {\n            hourFormat = `${difference}:00 pm`;\n          }\n        } else {\n          hourFormat = `${currentHour}:00 am`;\n        }\n        const hourTemp = value.temp.toFixed(0);\n        const rainProb = value.pop * 100;\n        const hourIcon = value.weather[0].icon;\n        const iconURL = `https://openweathermap.org/img/wn/${hourIcon}@2x.png`;\n        const hourDescription = value.weather[0].description;\n        const currentHourData = [hourFormat, hourTemp, iconURL, hourDescription, rainProb];\n        hourlyData.push(currentHourData);\n      }\n    });\n\n    // this code is to get the 7 day data\n    data.daily.forEach((value, idx) => {\n      if (idx >= 0 && idx !== 7 && sevenDayData.length !== 7) {\n        let dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\n          weekday: \"long\"\n        });\n        let icon = value.weather[0].icon;\n        let iconURL = `https://openweathermap.org/img/wn/${icon}@2x.png`;\n        let getProb = value.pop;\n        let rainProb = getProb * 100;\n        let minTemp = value.temp.min.toFixed(0);\n        let maxTemp = value.temp.max.toFixed(0);\n        let currentDayData = [dayname, rainProb, iconURL, minTemp, maxTemp];\n        sevenDayData.push(currentDayData);\n      }\n    });\n  } else {\n    getAllCoordinates = JSON.parse(localStorage.getItem(\"allCoordinates\"));\n    if (!getAllCoordinates) {\n      let defaultLatLong = [[40.7128, -74.0060], [48.8566, 2.3522], [52.5200, 13.4050]];\n      getAllCoordinates = defaultLatLong;\n    }\n    let getNeededCoordinates = getAllCoordinates[index];\n    let endpoint = `https://api.openweathermap.org/data/2.5/onecall?lat=${getNeededCoordinates[0]}&lon=${getNeededCoordinates[1]}&exclude=minutely,alerts&units=imperial&appid=e15a543800b7e60db9e4e04aaf22a037`;\n    const response = await fetch(endpoint);\n    if (response.status !== 200) {\n      alert(\"Unexpected error happened. Please try again\");\n      return [errorHrData, error7DayData, errorCurrentData];\n    }\n    const data = await response.json();\n\n    // this is the code to get the current weather information\n    const currentTemp = data.current.temp.toFixed(0);\n    ;\n    const currentSunset = new Date(data.current.sunset * 1000);\n    const sunsetHour = currentSunset.getHours();\n    const sunsetMins = currentSunset.getMinutes();\n    let newSunsetTime;\n    if (sunsetHour === 0) {\n      newSunsetTime = `12:${sunsetMins} am`;\n    } else if (sunsetHour > 11) {\n      const difference = sunsetHour - 12;\n      if (difference === 0) {\n        newSunsetTime = `12:${sunsetMins} pm`;\n      } else {\n        newSunsetTime = `${difference}:${sunsetMins} pm`;\n      }\n    } else {\n      newSunsetTime = `${sunsetHour}:${sunsetMins} am`;\n    }\n    const currentHumidity = data.current.humidity;\n    const currentIcon = data.current.weather[0].icon;\n    const currentIconURL = `https://openweathermap.org/img/wn/${currentIcon}@2x.png`;\n    const currentDesc = data.current.weather[0].description;\n    const currentFeels = data.current.feels_like.toFixed(0);\n    currentWeatherData = [currentTemp, newSunsetTime, currentHumidity, currentIconURL, currentDesc, currentFeels];\n\n    // this code is to get the hourly data\n    data.hourly.forEach((value, idx) => {\n      if (idx < 24 && hourlyData.length !== 24) {\n        const currentDate = new Date(value.dt * 1000);\n        const currentHour = currentDate.getHours();\n        let hourFormat;\n        if (currentHour === 0) {\n          hourFormat = `12:00 am`;\n        } else if (currentHour > 11) {\n          const difference = currentHour - 12;\n          if (difference === 0) {\n            hourFormat = `12:00 pm`;\n          } else {\n            hourFormat = `${difference}:00 pm`;\n          }\n        } else {\n          hourFormat = `${currentHour}:00 am`;\n        }\n        const hourTemp = value.temp.toFixed(0);\n        const rainProb = value.pop * 100;\n        const hourIcon = value.weather[0].icon;\n        const iconURL = `https://openweathermap.org/img/wn/${hourIcon}@2x.png`;\n        const hourDescription = value.weather[0].description;\n        const currentHourData = [hourFormat, hourTemp, iconURL, hourDescription, rainProb];\n        hourlyData.push(currentHourData);\n      }\n    });\n\n    // this code is to get the 7 day data\n    data.daily.forEach((value, idx) => {\n      if (idx >= 0 && idx !== 7 && sevenDayData.length !== 7) {\n        let dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\n          weekday: \"long\"\n        });\n        let icon = value.weather[0].icon;\n        let iconURL = `https://openweathermap.org/img/wn/${icon}@2x.png`;\n        let getProb = value.pop;\n        let rainProb = getProb * 100;\n        let minTemp = value.temp.min.toFixed(0);\n        let maxTemp = value.temp.max.toFixed(0);\n        let currentDayData = [dayname, rainProb, iconURL, minTemp, maxTemp];\n        sevenDayData.push(currentDayData);\n      }\n    });\n  }\n  return [hourlyData, sevenDayData, currentWeatherData];\n}\n\n/**This is the code for the old weather api */\n\n// export default async function display7DayData(location) {\n//     if (!location) {\n//         alert(\"Unexpected error. Try again\");\n//     }\n\n//     let ifSavedLocation = true;\n//     let index = 0;\n//     const getSavedLocations = JSON.parse(localStorage.getItem(\"savedLocations\")); \n//     for (index = 0; index < getSavedLocations.length; index++) {\n//         if (location === getSavedLocations[index]) {\n//             break;\n//         }\n//     }\n\n//     if (!ifSavedLocation) {\n//         alert(\"Not in saved locations\");\n//         return;\n//     }\n\n//     let getAllCoordinates = JSON.parse(localStorage.getItem(\"allCoordinates\"));\n//     if (!getAllCoordinates) {\n//         getAllCoordinates = [[40.7127281,-74.0060152],[48.8588897,2.3200410217200766],[52.5170365,13.3888599]];\n//     }\n\n//     let getNeededCoordinates = getAllCoordinates[index];\n//     let endpoint = `https://api.weather.gov/points/${getNeededCoordinates[0]},${getNeededCoordinates[1]}`;\n//     const response = await fetch(endpoint);\n\n//     if (response.status !== 200) {\n//         alert(\"Unexpected error happened. Please try again\");\n//         return;\n//     }\n\n//     const data = await response.json();\n//     let forecastData = await data.properties.forecast;\n//     let response2 = await fetch(forecastData);\n\n//     if (response2.status !== 200) {\n//         alert(\"Unexpected error happened. Please try again\");\n//         return;\n//     }\n\n//     const data2 = await response2.json();\n//     let dailyData = await data2.properties.periods;\n//     let dataForAllDays = [];\n//     dailyData.forEach((value, idx) => {\n//         if (value.name.includes(\"Night\") === false && dataForAllDays.length !== 7) {\n//             let day = value.name;\n//             let temp = value.temperature;\n//             let icon = value.icon;\n//             let currentDayData = [day, temp, icon];\n//             dataForAllDays.push(currentDayData);\n//         }\n//     });\n\n//     return dataForAllDays;\n//     // let dataForAllDays = [];\n\n//     // data.daily.forEach((value, idx) => {\n//     //     if (idx >= 0 && idx !== 7 && dataForAllDays.length !== 7) {\n//     //         let dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\n//     //             weekday: \"long\",\n//     //         });\n//     //         let icon = value.weather[0].icon;\n//     //         let iconURL = `https://openweathermap.org/img/wn/${icon}@2x.png`;\n//     //         let getProb = value.pop;\n//     //         let rainProb = getProb * 100;\n//     //         let minTemp = value.temp.min.toFixed(0);\n//     //         let maxTemp = value.temp.max.toFixed(0);\n//     //         let currentDayData = [dayname, rainProb, iconURL, minTemp, maxTemp];\n//     //         dataForAllDays.push(currentDayData);\n//     //     }\n//     // });\n\n//     // return dataForAllDays;\n// }","map":{"version":3,"names":["getHourly_Weekly_CurrentWeather","location","alert","ifSavedLocation","index","getSavedLocations","JSON","parse","localStorage","getItem","length","sevenDayData","hourlyData","getAllCoordinates","currentWeatherData","errorCurrentData","error7DayData","errorHrData","getCity","split","endpointCoord","response","fetch","status","responseData","json","newCoor","lat","lon","endpoint","res","data","currentTemp","current","temp","toFixed","currentSunset","Date","sunset","sunsetHour","getHours","sunsetMins","getMinutes","newSunsetTime","difference","currentHumidity","humidity","currentIcon","weather","icon","currentIconURL","currentDesc","description","currentFeels","feels_like","hourly","forEach","value","idx","currentDate","dt","currentHour","hourFormat","hourTemp","rainProb","pop","hourIcon","iconURL","hourDescription","currentHourData","push","daily","dayname","toLocaleDateString","weekday","getProb","minTemp","min","maxTemp","max","currentDayData","defaultLatLong","getNeededCoordinates"],"sources":["C:/Users/sotor/OneDrive/Desktop/NYU/Fifth Year/Collaborating Remotely Build Software from Anywhere/projects/WeatherApp/src/pages/Components/Helpers.js"],"sourcesContent":["export default async function getHourly_Weekly_CurrentWeather(location) {\r\n    if (!location) {\r\n        alert(\"Unexpected error. Try again\");\r\n        return;\r\n    }\r\n\r\n    let ifSavedLocation = false;\r\n    let index = 0;\r\n    const getSavedLocations = JSON.parse(localStorage.getItem(\"savedLocations\")); \r\n    for (index = 0; index < getSavedLocations.length; index++) {\r\n        if (location === getSavedLocations[index]) {\r\n            ifSavedLocation = true;\r\n            break;\r\n        }\r\n    }\r\n\r\n    let sevenDayData = [];\r\n    let hourlyData = [];\r\n    let getAllCoordinates;\r\n    let currentWeatherData;\r\n\r\n    const errorCurrentData = [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"];\r\n    const error7DayData = [\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"]\r\n    ];\r\n    const errorHrData = [\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n        [\"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\"],\r\n    ];\r\n\r\n    // the location provided to us is not in the saved location, so we need to go get that lat and lon for that location\r\n    if (!ifSavedLocation) {\r\n        // alert(\"Not in saved locations\");\r\n        let getCity = location.split(\",\");\r\n        let endpointCoord = `https://api.openweathermap.org/geo/1.0/direct?q=${getCity[0]}&appid=e15a543800b7e60db9e4e04aaf22a037`; // api to get coordinates lat and lon\r\n        const response = await fetch(endpointCoord);\r\n        if (response.status !== 200) {\r\n            alert(\"Unexpected error happened when getting coordinates. Please try again\");\r\n            return [errorHrData, error7DayData, errorCurrentData];\r\n        }\r\n        const responseData = await response.json();\r\n        const newCoor = [responseData[0].lat, responseData[0].lon];\r\n        getAllCoordinates = newCoor;\r\n        let endpoint = `https://api.openweathermap.org/data/2.5/onecall?lat=${getAllCoordinates[0]}&lon=${getAllCoordinates[1]}&exclude=minutely,alerts&units=imperial&appid=e15a543800b7e60db9e4e04aaf22a037`;\r\n        const res = await fetch(endpoint);\r\n        if (res.status !== 200) {\r\n            alert(\"Unexpected error happened when cit's weather. Please try again\");\r\n            return [errorHrData, error7DayData, errorCurrentData];\r\n        }\r\n        const data = await res.json();\r\n\r\n        // this is the code to get the current weather information\r\n        const currentTemp = data.current.temp.toFixed(0);;\r\n        const currentSunset = new Date(data.current.sunset * 1000);\r\n        const sunsetHour = currentSunset.getHours();\r\n        const sunsetMins = currentSunset.getMinutes();\r\n        let newSunsetTime;\r\n        if (sunsetHour === 0) {\r\n            newSunsetTime = `12:${sunsetMins} am`;\r\n        } else if (sunsetHour > 11) {\r\n            const difference = sunsetHour - 12;\r\n            if (difference === 0) {\r\n                newSunsetTime = `12:${sunsetMins} pm`;\r\n            } else {\r\n                newSunsetTime = `${difference}:${sunsetMins} pm`;\r\n            }\r\n        } else {\r\n            newSunsetTime = `${sunsetHour}:${sunsetMins} am`;\r\n        }\r\n        const currentHumidity = data.current.humidity;\r\n        const currentIcon = data.current.weather[0].icon;\r\n        const currentIconURL = `https://openweathermap.org/img/wn/${currentIcon}@2x.png`;\r\n        const currentDesc = data.current.weather[0].description;\r\n        const currentFeels = data.current.feels_like.toFixed(0);\r\n        currentWeatherData = [currentTemp, newSunsetTime, currentHumidity, currentIconURL, currentDesc, currentFeels];\r\n\r\n        // this code is to get the hourly data\r\n        data.hourly.forEach((value, idx) => {\r\n            if (idx < 24 && hourlyData.length !== 24) {\r\n                const currentDate = new Date(value.dt * 1000);\r\n                const currentHour = currentDate.getHours();\r\n                let hourFormat;\r\n                if (currentHour === 0) {\r\n                    hourFormat = `12:00 am`;\r\n                } else if (currentHour > 11) {\r\n                    const difference = currentHour - 12;\r\n                    if (difference === 0) {\r\n                        hourFormat = `12:00 pm`;\r\n                    } else {\r\n                        hourFormat = `${difference}:00 pm`;\r\n                    }\r\n                } else {\r\n                    hourFormat = `${currentHour}:00 am`;\r\n                }\r\n                const hourTemp = value.temp.toFixed(0);\r\n                const rainProb = value.pop * 100;\r\n                const hourIcon = value.weather[0].icon;\r\n                const iconURL = `https://openweathermap.org/img/wn/${hourIcon}@2x.png`;\r\n                const hourDescription = value.weather[0].description;\r\n                const currentHourData = [hourFormat, hourTemp, iconURL, hourDescription, rainProb];\r\n                hourlyData.push(currentHourData);\r\n            }\r\n        });\r\n\r\n        // this code is to get the 7 day data\r\n        data.daily.forEach((value, idx) => {\r\n            if (idx >= 0 && idx !== 7 && sevenDayData.length !== 7) {\r\n                let dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\r\n                    weekday: \"long\",\r\n                });\r\n                let icon = value.weather[0].icon;\r\n                let iconURL = `https://openweathermap.org/img/wn/${icon}@2x.png`;\r\n                let getProb = value.pop;\r\n                let rainProb = getProb * 100;\r\n                let minTemp = value.temp.min.toFixed(0);\r\n                let maxTemp = value.temp.max.toFixed(0);\r\n                let currentDayData = [dayname, rainProb, iconURL, minTemp, maxTemp];\r\n                sevenDayData.push(currentDayData);\r\n            }\r\n        });\r\n\r\n    } else {\r\n        getAllCoordinates = JSON.parse(localStorage.getItem(\"allCoordinates\"));\r\n        if (!getAllCoordinates) {\r\n            let defaultLatLong = [[40.7128,-74.0060],[48.8566,2.3522],[52.5200,13.4050]];\r\n            getAllCoordinates = defaultLatLong;\r\n        }\r\n        let getNeededCoordinates = getAllCoordinates[index];\r\n        let endpoint = `https://api.openweathermap.org/data/2.5/onecall?lat=${getNeededCoordinates[0]}&lon=${getNeededCoordinates[1]}&exclude=minutely,alerts&units=imperial&appid=e15a543800b7e60db9e4e04aaf22a037`;\r\n        const response = await fetch(endpoint);\r\n\r\n        if (response.status !== 200) {\r\n            alert(\"Unexpected error happened. Please try again\");\r\n            return [errorHrData, error7DayData, errorCurrentData];\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // this is the code to get the current weather information\r\n        const currentTemp = data.current.temp.toFixed(0);;\r\n        const currentSunset = new Date(data.current.sunset * 1000);\r\n        const sunsetHour = currentSunset.getHours();\r\n        const sunsetMins = currentSunset.getMinutes();\r\n        let newSunsetTime;\r\n        if (sunsetHour === 0) {\r\n            newSunsetTime = `12:${sunsetMins} am`;\r\n        } else if (sunsetHour > 11) {\r\n            const difference = sunsetHour - 12;\r\n            if (difference === 0) {\r\n                newSunsetTime = `12:${sunsetMins} pm`;\r\n            } else {\r\n                newSunsetTime = `${difference}:${sunsetMins} pm`;\r\n            }\r\n        } else {\r\n            newSunsetTime = `${sunsetHour}:${sunsetMins} am`;\r\n        }\r\n        const currentHumidity = data.current.humidity;\r\n        const currentIcon = data.current.weather[0].icon;\r\n        const currentIconURL = `https://openweathermap.org/img/wn/${currentIcon}@2x.png`;\r\n        const currentDesc = data.current.weather[0].description;\r\n        const currentFeels = data.current.feels_like.toFixed(0);\r\n        currentWeatherData = [currentTemp, newSunsetTime, currentHumidity, currentIconURL, currentDesc, currentFeels];\r\n\r\n        // this code is to get the hourly data\r\n        data.hourly.forEach((value, idx) => {\r\n            if (idx < 24 && hourlyData.length !== 24) {\r\n                const currentDate = new Date(value.dt * 1000);\r\n                const currentHour = currentDate.getHours();\r\n                let hourFormat;\r\n                if (currentHour === 0) {\r\n                    hourFormat = `12:00 am`;\r\n                } else if (currentHour > 11) {\r\n                    const difference = currentHour - 12;\r\n                    if (difference === 0) {\r\n                        hourFormat = `12:00 pm`;\r\n                    } else {\r\n                        hourFormat = `${difference}:00 pm`;\r\n                    }\r\n                } else {\r\n                    hourFormat = `${currentHour}:00 am`;\r\n                }\r\n                const hourTemp = value.temp.toFixed(0);\r\n                const rainProb = value.pop * 100;\r\n                const hourIcon = value.weather[0].icon;\r\n                const iconURL = `https://openweathermap.org/img/wn/${hourIcon}@2x.png`;\r\n                const hourDescription = value.weather[0].description;\r\n                const currentHourData = [hourFormat, hourTemp, iconURL, hourDescription, rainProb];\r\n                hourlyData.push(currentHourData);\r\n            }\r\n        });\r\n\r\n        // this code is to get the 7 day data\r\n        data.daily.forEach((value, idx) => {\r\n            if (idx >= 0 && idx !== 7 && sevenDayData.length !== 7) {\r\n                let dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\r\n                    weekday: \"long\",\r\n                });\r\n                let icon = value.weather[0].icon;\r\n                let iconURL = `https://openweathermap.org/img/wn/${icon}@2x.png`;\r\n                let getProb = value.pop;\r\n                let rainProb = getProb * 100;\r\n                let minTemp = value.temp.min.toFixed(0);\r\n                let maxTemp = value.temp.max.toFixed(0);\r\n                let currentDayData = [dayname, rainProb, iconURL, minTemp, maxTemp];\r\n                sevenDayData.push(currentDayData);\r\n            }\r\n        });\r\n    }\r\n\r\n    return [hourlyData, sevenDayData, currentWeatherData];\r\n}\r\n\r\n\r\n/**This is the code for the old weather api */\r\n\r\n// export default async function display7DayData(location) {\r\n//     if (!location) {\r\n//         alert(\"Unexpected error. Try again\");\r\n//     }\r\n\r\n//     let ifSavedLocation = true;\r\n//     let index = 0;\r\n//     const getSavedLocations = JSON.parse(localStorage.getItem(\"savedLocations\")); \r\n//     for (index = 0; index < getSavedLocations.length; index++) {\r\n//         if (location === getSavedLocations[index]) {\r\n//             break;\r\n//         }\r\n//     }\r\n\r\n//     if (!ifSavedLocation) {\r\n//         alert(\"Not in saved locations\");\r\n//         return;\r\n//     }\r\n\r\n//     let getAllCoordinates = JSON.parse(localStorage.getItem(\"allCoordinates\"));\r\n//     if (!getAllCoordinates) {\r\n//         getAllCoordinates = [[40.7127281,-74.0060152],[48.8588897,2.3200410217200766],[52.5170365,13.3888599]];\r\n//     }\r\n\r\n//     let getNeededCoordinates = getAllCoordinates[index];\r\n//     let endpoint = `https://api.weather.gov/points/${getNeededCoordinates[0]},${getNeededCoordinates[1]}`;\r\n//     const response = await fetch(endpoint);\r\n\r\n//     if (response.status !== 200) {\r\n//         alert(\"Unexpected error happened. Please try again\");\r\n//         return;\r\n//     }\r\n\r\n//     const data = await response.json();\r\n//     let forecastData = await data.properties.forecast;\r\n//     let response2 = await fetch(forecastData);\r\n\r\n//     if (response2.status !== 200) {\r\n//         alert(\"Unexpected error happened. Please try again\");\r\n//         return;\r\n//     }\r\n\r\n//     const data2 = await response2.json();\r\n//     let dailyData = await data2.properties.periods;\r\n//     let dataForAllDays = [];\r\n//     dailyData.forEach((value, idx) => {\r\n//         if (value.name.includes(\"Night\") === false && dataForAllDays.length !== 7) {\r\n//             let day = value.name;\r\n//             let temp = value.temperature;\r\n//             let icon = value.icon;\r\n//             let currentDayData = [day, temp, icon];\r\n//             dataForAllDays.push(currentDayData);\r\n//         }\r\n//     });\r\n\r\n//     return dataForAllDays;\r\n//     // let dataForAllDays = [];\r\n\r\n//     // data.daily.forEach((value, idx) => {\r\n//     //     if (idx >= 0 && idx !== 7 && dataForAllDays.length !== 7) {\r\n//     //         let dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\r\n//     //             weekday: \"long\",\r\n//     //         });\r\n//     //         let icon = value.weather[0].icon;\r\n//     //         let iconURL = `https://openweathermap.org/img/wn/${icon}@2x.png`;\r\n//     //         let getProb = value.pop;\r\n//     //         let rainProb = getProb * 100;\r\n//     //         let minTemp = value.temp.min.toFixed(0);\r\n//     //         let maxTemp = value.temp.max.toFixed(0);\r\n//     //         let currentDayData = [dayname, rainProb, iconURL, minTemp, maxTemp];\r\n//     //         dataForAllDays.push(currentDayData);\r\n//     //     }\r\n//     // });\r\n\r\n//     // return dataForAllDays;\r\n// }"],"mappings":"AAAA,eAAe,eAAeA,+BAA+B,CAACC,QAAQ,EAAE;EACpE,IAAI,CAACA,QAAQ,EAAE;IACXC,KAAK,CAAC,6BAA6B,CAAC;IACpC;EACJ;EAEA,IAAIC,eAAe,GAAG,KAAK;EAC3B,IAAIC,KAAK,GAAG,CAAC;EACb,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;EAC5E,KAAKL,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGC,iBAAiB,CAACK,MAAM,EAAEN,KAAK,EAAE,EAAE;IACvD,IAAIH,QAAQ,KAAKI,iBAAiB,CAACD,KAAK,CAAC,EAAE;MACvCD,eAAe,GAAG,IAAI;MACtB;IACJ;EACJ;EAEA,IAAIQ,YAAY,GAAG,EAAE;EACrB,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,iBAAiB;EACrB,IAAIC,kBAAkB;EAEtB,MAAMC,gBAAgB,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EACjE,MAAMC,aAAa,GAAG,CAClB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAC3C;EACD,MAAMC,WAAW,GAAG,CAChB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAA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"},"metadata":{},"sourceType":"module"}